version: '3'

# Networking
networks:
  default:
    name: backend
  frontend:
    driver: bridge
  backend:
    driver: bridge

# Storage Volumes
volumes:
  caddy_config:
  caddy_data:
  cassandra_data:
  grafana_data:
  prometheus_data:
  rabbitmq_mnesia:
  timescaledb_data:
  vault_file:
  vault_logs:

# Docker Services
services:
  # Prometheus (Time Series DB)
  prometheus:
    build:
      context: './docker/prometheus'
    restart: unless-stopped
    ports:
      - '9090:9090'
      - '9092:9092'
    volumes:
      - prometheus_data:/prometheus
    networks:
      - frontend
      - backend

  # postgres-exporter
  postgres-exporter:
    build:
      context: './docker/postgres-exporter'
    ports:
      - 9187:9187
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - timescaledb
      - prometheus
    environment:
      DATA_SOURCE_NAME: postgres://postgres:password@timescaledb:5432/postgres?sslmode=allow

  # Grafana (Dashboards)
  grafana:
    build:
      context: './docker/grafana'
    restart: unless-stopped
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - frontend
      - backend
    depends_on:
      - prometheus
    environment:
      GF_INSTALL_PLUGINS: 'flant-statusmap-panel,grafana-piechart-panel'

  # Caddy (Proxy)
  caddy:
    build:
      context: './docker/caddy'
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/caddy/config/Caddyfile:/etc/caddy/Caddyfile
      - ./build:/srv
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - frontend
      - backend

  # Vault
  vault:
    build:
      context: './docker/vault'
    restart: unless-stopped
    ports:
      - '${VAULT_PORT}:${VAULT_PORT}'
    volumes:
      - vault_file:/vault/file
      - vault_logs:/vault/logs
    networks:
      - frontend
      - backend

  # Node (JS Engine)
  node:
    build:
      context: .
    restart: unless-stopped
    ports:
      - '3000'
    networks:
      - backend

  # RabbitMQ (Message Broker)
  rabbitmq:
    build:
      context: './docker/rabbitmq'
    restart: unless-stopped
    volumes:
      - rabbitmq_mnesia:/var/lib/rabbitmq
    ports:
      - '15672:15672' # UI
      - '15692:15692' # Prometheus /metrics
      - '5672:5672' # AMQP Messages
    networks:
      - backend
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=secret

  # TimescaleDB (Time Series DB)
  timescaledb:
    build:
      context: './docker/timescaledb'
    restart: unless-stopped
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - backend
    environment:
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-password}'

  # Promscale (Logs Connector)
  promscale:
    build:
      context: './docker/promscale'
    ports:
      - 9201:9201
      - 9202:9202
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - timescaledb
      - prometheus
    environment:
      PROMSCALE_DB_CONNECT_RETRIES: 10
      PROMSCALE_WEB_TELEMETRY_PATH: /metrics-text
      PROMSCALE_DB_URI: postgres://postgres:password@timescaledb:5432/postgres?sslmode=allow

  #  promscale-jaeger:
  #    build:
  #      context: './docker/promscale-jaeger'
  #    networks:
  #      - frontend
  #      - backend
  #    restart: unless-stopped

  hasura:
    build:
      context: './docker/hasura'
    command:
      - graphql-engine
      - serve
      - --enable-console
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:password@timescaledb:5432/postgres?sslmode=allow
    ports:
      - 8082:8080
    restart: unless-stopped
    depends_on:
      - timescaledb
    networks:
      - backend
      - frontend

  jaeger-collector:
    build:
      context: './docker/jaeger-collector'
    command:
      - '--cassandra.keyspace=jaeger_v1_dc1'
      - '--cassandra.servers=cassandra'
      - '--collector.zipkin.host-port=9411'
      - '--sampling.initial-sampling-probability=.5'
      - '--sampling.target-samples-per-second=.01'
    environment:
      - SAMPLING_CONFIG_TYPE=adaptive
    ports:
      - '14269:14269'
      - '14268:14268'
      - '14250'
      - '9411:9411' # Zipkin
    restart: unless-stopped
    depends_on:
      - cassandra-schema
    networks:
      - backend

  jaeger-query:
    build:
      context: './docker/jaeger-query'
    command: ['--cassandra.keyspace=jaeger_v1_dc1', '--cassandra.servers=cassandra']
    ports:
      - '16686:16686'
      - '16687'
    restart: unless-stopped
    depends_on:
      - cassandra-schema
    networks:
      - backend
      - frontend

  jaeger-agent:
    build:
      context: './docker/jaeger-agent'
    command: ['--reporter.grpc.host-port=jaeger-collector:14250']
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
    restart: unless-stopped
    depends_on:
      - jaeger-collector
    networks:
      - backend

  cassandra:
    build:
      context: './docker/cassandra'
    ports:
      - '9042:9042'
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - backend

  cassandra-schema:
    build:
      context: './docker/cassandra-schema'
    depends_on:
      - cassandra
    networks:
      - backend

  postgres:
    image: postgres
    environment:
      POSTGRES_DB: concourse
      POSTGRES_USER: concourse_user
      POSTGRES_PASSWORD: concourse_pass
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '10m'

  concourse-web:
    image: concourse/concourse
    command: web
    links: [postgres]
    depends_on: [postgres]
    ports: ['8081:8080']
    volumes: ['./keys/web:/concourse-keys']
    environment:
      CONCOURSE_EXTERNAL_URL: http://localhost:8081
      CONCOURSE_POSTGRES_HOST: postgres
      CONCOURSE_POSTGRES_USER: concourse_user
      CONCOURSE_POSTGRES_PASSWORD: concourse_pass
      CONCOURSE_POSTGRES_DATABASE: concourse
      CONCOURSE_ADD_LOCAL_USER: admin:password
      CONCOURSE_MAIN_TEAM_LOCAL_USER: admin
      CONCOURSE_SESSION_SIGNING_KEY: /concourse-keys/session_signing_key
      CONCOURSE_TSA_HOST_KEY: /concourse-keys/tsa_host_key
      CONCOURSE_TSA_AUTHORIZED_KEYS: /concourse-keys/authorized_worker_keys

  concourse-worker:
    image: concourse/concourse
    command: worker
    privileged: true
    depends_on: [concourse-web]
    volumes: ['./keys/worker:/concourse-keys']
    links: [concourse-web]
    stop_signal: SIGUSR2
    environment:
      CONCOURSE_TSA_HOST: concourse-web:2222
      # enable DNS proxy to support Docker's 127.x.x.x DNS server
      CONCOURSE_GARDEN_DNS_PROXY_ENABLE: 'true'
      CONCOURSE_TSA_PUBLIC_KEY: /concourse-keys/tsa_host_key.pub
      CONCOURSE_TSA_WORKER_PRIVATE_KEY: /concourse-keys/worker_key
